image: atlassian/default-image:3

definitions: 
  steps:  # defining the step that will be referenced multiple times later in pipeline
    - step: &build-env
        name: Build environment
        trigger: manual
        script:
            - echo "Environment built by $author"
            - IMAGE_NAME="environments:wordpress-php8-apache-latest"
            - docker build . --file ./base.env/.docker-config/wordpress/env.Dockerfile --tag "${IMAGE_NAME}" --no-cache
            - docker save "${IMAGE_NAME}" --output "${IMAGE_NAME}.tar"
            # Build and push image
            - echo ${DOCKERHUB_PASSWORD} | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
            - docker tag "${IMAGE_NAME}" "ticblue/${IMAGE_NAME}"
            - docker push "ticblue/${IMAGE_NAME}"
        services:
          - docker
        caches:
          - docker
        artifacts:
          - "*.tar"

    - step: &build-push-image
        name: Build wordpress image and push it to Docker
        trigger: manual
        script:
            - docker load --input "environments:wordpress-php8-apache-latest"
            # Prepare
            - VERSION="${APPLICATION_ENVIRONMENT}_$(date +%Y%m%d_%H%M%S)_v${BITBUCKET_BUILD_NUMBER}"
            - IMAGE_NAME="environments:${BITBUCKET_REPO_SLUG}_${VERSION}"
            - docker build . --file ./base-env/.docker-config/wordpress/build.Dockerfile --tag "${IMAGE_NAME}" --no-cache
            - docker tag "${IMAGE_NAME}" "us-central1-docker.pkg.dev/redblu-wordpress-dev/testing/${IMAGE_NAME}"
            - docker push "us-central1-docker.pkg.dev/redblu-wordpress-dev/testing/${IMAGE_NAME}"
            # Push tags
            - git tag -a "${VERSION}" -m "Tagging for release ${VERSION}"
            - git push origin ${VERSION} 
        services:
          - docker

    # - step: &gcloud-setup
    #   name: GCP setup
    #   trigger: manual
    #   script:
    #     - SDK_VERSION=197.0.0
    #     - SDK_FILENAME=google-cloud-sdk-${SDK_VERSION}-linux-x86_64.tar.gz
    #     # Install Google Cloud SDK
    #     - curl -o /tmp/google-cloud-sdk.tar.gz https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/${SDK_FILENAME}
    #     - tar -xvf /tmp/google-cloud-sdk.tar.gz -C /tmp/
    #     - /tmp/google-cloud-sdk/install.sh -q
    #     - source /tmp/google-cloud-sdk/path.bash.inc
    #     - gcloud -v
    #     # Authenticating with the service account key file
    #     - echo $GCLOUD_API_KEYFILE | base64 - decode - ignore-garbage > ./gcloud-api-key.json
    #     - gcloud auth activate-service-account - key-file gcloud-api-key.json
    #     # Linking to the Google Cloud project
    #     - gcloud config set project $GCLOUD_PROJECT
    #     # Deploying the application
    #     #- gcloud -q app deploy app.yml

pipelines:
  custom: # Pipelines that can only be triggered manually
    build-qa-env:
    - variables:          #list variable names under here
          - name: author
    - step:
        <<: *build-env
        deployment: test
    build-push-qa-image:
    - step:
        <<: *build-push-image
        deployment: test
    build-prod-env:
    - step:
        <<: *build-env
        deployment: production
    build-push-prod-image:
    - step:
        <<: *build-push-image
        deployment: production 
    